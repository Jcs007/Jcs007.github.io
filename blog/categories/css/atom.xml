<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Css | My Octopress Blog]]></title>
  <link href="http://jcs007.github.io/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://jcs007.github.io/"/>
  <updated>2017-09-12T17:31:28+08:00</updated>
  <id>http://jcs007.github.io/</id>
  <author>
    <name><![CDATA[Jcs007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compass]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/17/demo07/"/>
    <updated>2017-08-17T22:49:15+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/17/demo07</id>
    <content type="html"><![CDATA[<h1>Compass</h1>

<ul>
<li><p>CSS功能强大，可以实现复杂的布局和绚丽的效果，逐步变得不可或缺。CSS又颇具痛点，没有算法，没有数据结构，没有逻辑控制，没有封装，没有复用。</p></li>
<li><p>CSS技术的飞速发展，各种高端特征飞扑而来，但是兼容性问题、种种bug问题日益严重，CSS开发变得越来越复杂。如何提高CSS的开发效率、降低CSS的维护成本&mdash;sass。</p></li>
<li><p>面向对象CSS的注意事项：</p>

<ul>
<li>不要直接定义子节点，应把共性声明放到父类。</li>
<li>结构和皮肤相分离。</li>
<li>容器和内容相分离。</li>
<li>抽象出可重用的元素，建好组件库，在组件库内寻找可用的元素组装页面。</li>
<li>往你想要扩展的对象本身增加class而不是他的父节点。</li>
<li>对象应保持独立性。</li>
<li>避免使用ID选择器，权重太高，无法重用。</li>
<li>避免位置相关的样式。</li>
<li>保证选择器相同的权重。</li>
<li>类名简短、清晰、语义化。</li>
</ul>
</li>
<li><p>compass常用命令</p>

<ul>
<li>compass create</li>
<li>compass init</li>
<li>compass clean</li>
<li>compass compile</li>
<li>compass watch</li>
<li>compass stats</li>
<li>compass validate</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Response Layout]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/07/demo02/"/>
    <updated>2017-08-07T13:43:29+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/07/demo02</id>
    <content type="html"><![CDATA[<h1>响应式布局</h1>

<ul>
<li><p>@media</p>

<blockquote><p>Media Queries：其作用就是允许添加表达式用以确定媒体的环境情况，以此来应用不同的样式表。换句话说，其允许我们在不改变内容的情况下，改变页面的布局以精确适应不同的设备</p></blockquote>

<ul>
<li><p>适配移动端，在head标签里加入一下语句
<code>
&lt;meta name="viewport" content="width=device-width,initial-scale=1"/&gt;
</code></p></li>
<li><p>响应式布局的写法</p></li>
</ul>


<pre><code class="``">  1、&lt;link rel="stylesheet" type="text/css" href="styleB.css" media="screen and (min-width:600px) and (max-width:800px)"&gt;
</code></pre>

<pre><code class="``">  2、&lt;link rel="stylesheet" type="text/css" href="styleA.css" media="screen and (min-width:400px)"&gt;
</code></pre>

<pre><code class="``">  3、&lt;link rel="stylesheet" media="only screen and(-webkit-min-device-pixel-ratio:2)" type="text/css" href="iphone4.css"/&gt;/*(orientation:portrait)横向（landscape)*/
</code></pre>

<pre><code class="``">  4、&lt;style type="text/css"&gt;
      @media only screen and(max-width:400px){/*当屏幕尺寸小于400px时，应用下面的CSS样式*/
          .class{
              background:#ccc;
          }
      }
      &lt;/style&gt;
</code></pre>

<ul>
<li>Hack（老式浏览器并不支持Media Queries,比如IE9，可以借助JS的库）</li>
</ul>


<pre><code class="``">  &lt;!--[if it IE9]&gt;
      &lt;script src="http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"&gt;&lt;/script&gt;
  &lt;![endif]--&gt;
</code></pre>

<ul>
<li><p>注意事项</p>

<ul>
<li><p>First</p>

<pre><code class="``">  html{font-size:62.5%;} font-size:2rem==font-size:20px;
</code></pre>

<blockquote><p>默认字体大小是16px,16*62.5%=10px,1rem=10px。rem只相对HTNL或body的字体大小，没有继承父级尺寸的关系，但是em有继承父级尺寸的关系。</p></blockquote></li>
<li><p>Second</p>

<blockquote><p>min-width&amp;max-width的意思是最小宽度和最大宽度</p></blockquote></li>
<li><p>Third</p>

<blockquote><p>div布局尽量用百分比，不使用固定像素</p></blockquote></li>
<li><p>Forth</p>

<pre><code class="``">  box-sizing:border-box;
</code></pre>

<blockquote><p>标准盒模型里面撑的时候，外面会变大，设置了box-sizing后，固定和盒模型的大小，不会被撑大。</p></blockquote></li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
