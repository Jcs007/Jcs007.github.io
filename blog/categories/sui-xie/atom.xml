<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 随写 | My Octopress Blog]]></title>
  <link href="http://jcs007.github.io/blog/categories/sui-xie/atom.xml" rel="self"/>
  <link href="http://jcs007.github.io/"/>
  <updated>2017-08-17T23:21:14+08:00</updated>
  <id>http://jcs007.github.io/</id>
  <author>
    <name><![CDATA[Jcs007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compass]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/17/demo07/"/>
    <updated>2017-08-17T22:49:15+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/17/demo07</id>
    <content type="html"><![CDATA[<h1>Compass</h1>

<ul>
<li><p>CSS功能强大，可以实现复杂的布局和绚丽的效果，逐步变得不可或缺。CSS又颇具痛点，没有算法，没有数据结构，没有逻辑控制，没有封装，没有复用。</p></li>
<li><p>CSS技术的飞速发展，各种高端特征飞扑而来，但是兼容性问题、种种bug问题日益严重，CSS开发变得越来越复杂。如何提高CSS的开发效率、降低CSS的维护成本&mdash;sass。</p></li>
<li><p>面向对象CSS的注意事项：</p>

<ul>
<li>不要直接定义子节点，应把共性声明放到父类。</li>
<li>结构和皮肤相分离。</li>
<li>容器和内容相分离。</li>
<li>抽象出可重用的元素，建好组件库，在组件库内寻找可用的元素组装页面。</li>
<li>往你想要扩展的对象本身增加class而不是他的父节点。</li>
<li>对象应保持独立性。</li>
<li>避免使用ID选择器，权重太高，无法重用。</li>
<li>避免位置相关的样式。</li>
<li>保证选择器相同的权重。</li>
<li>类名简短、清晰、语义化。</li>
</ul>
</li>
<li><p>compass常用命令</p>

<ul>
<li>compass create</li>
<li>compass init</li>
<li>compass clean</li>
<li>compass compile</li>
<li>compass watch</li>
<li>compass stats</li>
<li>compass validate</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
