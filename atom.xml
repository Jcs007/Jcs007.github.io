<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://jcs007.github.io/atom.xml" rel="self"/>
  <link href="http://jcs007.github.io/"/>
  <updated>2017-10-07T21:43:01+08:00</updated>
  <id>http://jcs007.github.io/</id>
  <author>
    <name><![CDATA[Jcs007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Js笔记]]></title>
    <link href="http://jcs007.github.io/blog/2017/09/12/demo10/"/>
    <updated>2017-09-12T21:11:15+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/09/12/demo10</id>
    <content type="html"><![CDATA[<h1>Js大坑之&mdash;this</h1>

<blockquote><p>在一个方法内部，this是一个特殊变量，ta始终指向当前对象。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function getAge() {
</span><span class='line'>    var y = new Date().getFullYear();
</span><span class='line'>    return y - this.birth;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var xiaoming = {
</span><span class='line'>    name: '小明',
</span><span class='line'>    birth: 1990,
</span><span class='line'>    age: getAge
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>xiaoming.age(); // 27, 正常结果
</span><span class='line'>getAge(); // NaN</span></code></pre></td></tr></table></div></figure>


<blockquote><p>JavaScript的函数内部如果调用了this，这个this指向谁&mdash;答案是：视情况而定。</p>

<p>如果以对象的方法形式调用，比如xiaoming.age(),该函数的this指向被调用的对象&mdash;xiaoming。</p>

<p>如果单独调用函数，比如getAge(),此时，该函数this指向全局对象&mdash;window。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var fn = xiaoming.age; // 先拿到xiaoming的age函数
</span><span class='line'>fn(); // NaN</span></code></pre></td></tr></table></div></figure>


<blockquote><p>这样写也是不行的，要保证this指向正确，必须用obj.xxx()的形式调用。</p>

<p>ECMA决定，在strict模式下让函数的this指向undefined。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict';
</span><span class='line'>
</span><span class='line'>var xiaoming = {
</span><span class='line'>    name: '小明',
</span><span class='line'>    birth: 1990,
</span><span class='line'>    age: function () {
</span><span class='line'>        var y = new Date().getFullYear();
</span><span class='line'>        return y - this.birth;
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>var fn = xiaoming.age;
</span><span class='line'>fn(); // Uncaught TypeError: Cannot read property 'birth' of undefined</span></code></pre></td></tr></table></div></figure>


<blockquote><p>这个方法只是让错误及时暴露出来，并没解决this应该指向的正确位置。</p>

<p>如果把方法重构：</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict';
</span><span class='line'>
</span><span class='line'>var xiaoming = {
</span><span class='line'>    name: '小明',
</span><span class='line'>    birth: 1990,
</span><span class='line'>    age: function () {
</span><span class='line'>        function getAgeFromBirth() {
</span><span class='line'>            var y = new Date().getFullYear();
</span><span class='line'>            return y - this.birth;
</span><span class='line'>        }
</span><span class='line'>        return getAgeFromBirth();
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>xiaoming.age(); // Uncaught TypeError: Cannot read property 'birth' of undefined</span></code></pre></td></tr></table></div></figure>


<blockquote><p>结果又报错了！原因是this指针只在age方法的函数内指向xiaoming。</p>

<p>在函数内部定义的函数，this又指向undefined了！（在非strict模式下，它重新指向全局对象window！）</p>

<p>修复的办法为：用一个that变量首先捕获this。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict';
</span><span class='line'>
</span><span class='line'>var xiaoming = {
</span><span class='line'>    name: '小明',
</span><span class='line'>    birth: 1990,
</span><span class='line'>    age: function () {
</span><span class='line'>        var that = this; // 在方法内部一开始就捕获this
</span><span class='line'>        function getAgeFromBirth() {
</span><span class='line'>            var y = new Date().getFullYear();
</span><span class='line'>            return y - that.birth; // 用that而不是this
</span><span class='line'>        }
</span><span class='line'>        return getAgeFromBirth();
</span><span class='line'>    }
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>xiaoming.age(); // 25</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[词]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/24/demo09/"/>
    <updated>2017-08-24T21:05:02+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/24/demo09</id>
    <content type="html"><![CDATA[<h1>悟</h1>

<blockquote><p>灯下沉思，柔光发间过，斑驳影。</p>

<p>未知去年时候，可曾相忆？</p>

<p>叹经年，谁于我醉，只是桃红，芭蕉翠绿落泪滴！</p>

<p>去千里，纵然不是繁华梦，温柔刺入心！</p>

<p>豪情千丈，万丈，亿百丈，难填胸中若谷。</p>

<p>何年山巅衣袂飘，一曲洞箫，云浮我指尖！</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js笔记]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/19/demo08/"/>
    <updated>2017-08-19T00:01:36+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/19/demo08</id>
    <content type="html"><![CDATA[<h1>局部作用域</h1>

<blockquote><p>由于JavaScript的变量作用域实际上是函数内部，在for循环等语句块中应该是无法定义具有局部作用域的变量的。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict';
</span><span class='line'>
</span><span class='line'>function voo() {
</span><span class='line'>    for (var i=0; i&lt;100; i++) {
</span><span class='line'>        //
</span><span class='line'>    }
</span><span class='line'>    i += 100; // 仍然可以引用变量i
</span><span class='line'>  console.log(i);//200
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<blockquote><p>为了解决块级作用域，ES6引入了新的关键字let,用let替代var可以申明一个块级作用域的变量。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict';
</span><span class='line'>
</span><span class='line'>function voo() {
</span><span class='line'>    var sum = 0;
</span><span class='line'>    for (let i=0; i&lt;100; i++) {
</span><span class='line'>        sum += i;
</span><span class='line'>    }
</span><span class='line'>    i += 1; // SyntaxError
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/17/demo07/"/>
    <updated>2017-08-17T22:49:15+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/17/demo07</id>
    <content type="html"><![CDATA[<h1>白龙马和小毛驴的故事</h1>

<blockquote><p>有这样一个故事：白龙马就要和唐僧去西天取经了，临行前他去和他的好友小毛驴告别。</p>

<p>白龙马： “驴兄，我明天就要和师傅去西天取经了，以后你可要照顾好自己，等我回来哟”。</p>

<p>小毛驴： “什么?什么?你说什么?你说你要去西天取经。不是吧!我听说去西天，有十万八千里那么远，哪一天才能走到呀?</p>

<p>我还听说，在去西天的路上有许许多多的妖魔鬼怪，好凶好凶的!可别经没取到，把小命给丢了。我看你呀还是听我一句劝，别去了，像我这样每天推推磨，多好呀!</p>

<p>风吹不到、雨淋不着的，主人每天都会把草料准备好，根本不用操心温饱问题。悠然自得的多好呀!”</p>

<p>白龙马：“不!无论怎样我都一定要去西天取经，因为那是我的理想。我走了，保重!”。</p>

<p>小毛驴摇摇头： “哎，不听老人言，吃亏在眼前。你一定会后悔的”。</p>

<p>就这样，白龙马和唐三藏一起上路了。历经万水千山，经历风风雨雨，十年后白龙马取得真经，修成正果。回到家乡，受到所有人的尊敬和爱戴，被奉为英雄，成为所有人崇拜和追随的对象。</p>

<p>白龙马来到磨房，看到老友小毛驴，依然是拉着那个磨盘在原地打转转，只是脚步比十年前沉重了许多。</p>

<p>小毛驴看到神采奕奕的老友白龙马，真是羡慕无比：“马兄，你好伟大哟，我好崇拜你呀，十年前我就知道你一定会成功的!快给我讲讲你取经的故事。一定很辛苦吧!”</p>

<p>白龙马：“其实也不是太辛苦的，我每天走的路和你走的路也差不多。只不过我是一直朝着西天走，而你是一直在原地打转转而已。我相信在这十年里，你也一定围着这盘磨走了十万八千里，但却始终没有走出这个磨房。”</p>

<p>小毛驴有些沮丧，又问： “一定遇上妖魔鬼怪了吧?”白龙马：“是呀，不但遇上了妖魔鬼怪，我还学会了如何战胜妖魔鬼怪。这一路走下来我还见识了许多人间美景，见过沙漠的苍茫，见过大海的壮阔，见过高山的巍峨，见过江河的汹涌……”</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js笔记]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/11/demo06/"/>
    <updated>2017-08-11T23:16:35+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/11/demo06</id>
    <content type="html"><![CDATA[<h1>事件处理程序</h1>

<ul>
<li><p>HTML事件处理程序</p>

<ul>
<li>缺点：HTML和JavaScript代码的耦合性太高，更换事件处理程序，就要改动两个地方，不可以增加多事件。</li>
</ul>
</li>
<li><p>DOM0事件处理程序</p>

<ul>
<li>局限：只能绑定一个事件，后面的事件会覆盖前面的事件。</li>
</ul>
</li>
<li><p>DOM2事件处理程序</p>

<ul>
<li>addEventListener(事件名，函数，布尔值）false：冒泡；true：捕获。</li>
<li>removeEventListener(事件名，函数，布尔值）false：冒泡；true：捕获。</li>
<li>主要优点：可以添加多个事件处理程序。</li>
<li>支持程度：IE9，Firefox，safari，chrome，opera。</li>
</ul>
</li>
<li><p>IE事件处理程序</p>

<ul>
<li>attachEvent(事件名，函数）</li>
<li>detachEvent(事件名，函数）</li>
<li>只支持事件冒泡。支持IE，opera。</li>
</ul>
</li>
<li><p>跨浏览器事件处理程序</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var x=document.getElementById('btn1')
</span><span class='line'>function addApp(){
</span><span class='line'>    if(x.addEventListener){
</span><span class='line'>        x.addEventListener("click",clickMe,false);
</span><span class='line'>    }else if(x.attachEvent){
</span><span class='line'>        x.attachEvent("click",clickMe);
</span><span class='line'>    }else{
</span><span class='line'>        x.onclick=clickMe;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>function clickMe(){
</span><span class='line'>    alert("点击到我了！");
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[诗]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/11/demo05/"/>
    <updated>2017-08-11T21:59:03+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/11/demo05</id>
    <content type="html"><![CDATA[<h1>晨练时想</h1>

<blockquote><p>长桥跨湖上，</p>

<p>桂香满园中。</p>

<p>旭日迎垂柳，</p>

<p>涟漪一婆娑。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[词]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/10/demo04/"/>
    <updated>2017-08-10T21:58:21+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/10/demo04</id>
    <content type="html"><![CDATA[<h1>睡前小序</h1>

<blockquote><p>天黑黑，暗暗更无影;夜静静，嘶嘶犹虫鸣。</p>

<p>丹青悬住点难起，白纸未得白纸命。</p>

<p>经年何似一日梦？无缘无份权作萍。</p>

<p>落花随流水，只是天意;浮生逐美色，怕只无情。</p>

<p>鸿雁不飞青鸟不至，木鱼无二枫叶不诗！</p>

<p>偶忆起，喃喃问，知为谁吟？</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js笔记]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/09/demo03/"/>
    <updated>2017-08-09T16:16:18+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/09/demo03</id>
    <content type="html"><![CDATA[<h1>变量提升</h1>

<blockquote><p>javascript的函数定义的一个特点&mdash;先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict'
</span><span class='line'>
</span><span class='line'>function voo(){
</span><span class='line'>  var x='Hello,'+y;
</span><span class='line'>  console.log(x);
</span><span class='line'>  var y='Bob';
</span><span class='line'>}
</span><span class='line'>voo();</span></code></pre></td></tr></table></div></figure>


<blockquote><p>虽然是strict模式，但语句var x=&lsquo;Hello,&rsquo;+y;并不报错，因为变量y的申明在后面。但是输出的是Hello,undefined,说明变量y的值为undefined。这是因为javascript引擎自动提升了变量y的申明，但没有提升变量y的赋值。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js笔记]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/08/demo02/"/>
    <updated>2017-08-08T19:40:09+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/08/demo02</id>
    <content type="html"><![CDATA[<h1>Argument</h1>

<blockquote><p>arguments只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。类似Array,但是ta不是一个Array。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function voo(x){
</span><span class='line'>  console.log(x);//输出调用者传入的第一个参数,23
</span><span class='line'>  for(var i=0;i&lt;arguments.length;i++){
</span><span class='line'>      console.log(arguments[i]);//23,24,25,26
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>voo(23,24,25,26);</span></code></pre></td></tr></table></div></figure>


<blockquote><p>利用arguments，可以获得调用者传入的所有参数。即使函数不定义任何参数，还是可以拿到参数的值。</p>

<p>实际上arguments最常用于判断传入参数的个数。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//voo(a[,b],c)   接收2到3个参数，b是可选参数。如果传入2个参数，b默认为null。
</span><span class='line'>
</span><span class='line'>function voo(a,b,c){
</span><span class='line'>  if(arguments.length===2){
</span><span class='line'>  //实际拿到的参数是a和b,c为undefined
</span><span class='line'>  
</span><span class='line'>  c=b;//把b赋值给c
</span><span class='line'>  b=null;//b变为默认
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js笔记]]></title>
    <link href="http://jcs007.github.io/blog/2017/08/07/demo01/"/>
    <updated>2017-08-07T13:29:29+08:00</updated>
    <id>http://jcs007.github.io/blog/2017/08/07/demo01</id>
    <content type="html"><![CDATA[<h1>for&hellip;in&hellip;和for&hellip;of&hellip;的区别。</h1>

<h2>for&hellip;in&hellip;</h2>

<blockquote><p>由于历史遗留问题，ta遍历的实际上是对象的属性名称。一个Array数组实际上是一个对象，ta的每个元素的索引被视为一个属性。当手动给Array对象添加了额外的属性后，for&hellip;in&hellip;循环将带来意想不到的意外效果。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var a=['A','B','C'];
</span><span class='line'>a.name='Bob';
</span><span class='line'>for(var x in a){
</span><span class='line'>  console.log(x);//'0','1','2','name'
</span><span class='line'>  console.log(a[x]);//'A','B','C','Bob'
</span><span class='line'>  console.log(a.length);//3
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>for&hellip;of&hellip;</h2>

<blockquote><p>ta完全修复了上述问题，只循环集合本身的元素。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ar a=['A','B','C'];
</span><span class='line'>a.name='Bob';
</span><span class='line'>for(var x in a){
</span><span class='line'>  console.log(x);//'A','B','C'
</span><span class='line'>  console.log(a[x]);//undefined,undefined,undefined
</span><span class='line'>  console.log(a.length);//3
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
